<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5497 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5497.xml">
<!ENTITY RFC7927 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7927.xml">
<!ENTITY RFC8569 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8569.xml">
<!ENTITY RFC8609 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8609.xml">
<!ENTITY RFC9139 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.9139.xml">
<!ENTITY I-D.mastorakis-icnrg-icntraceroute SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mastorakis-icnrg-icntraceroute.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="exp" docName="draft-irtf-icnrg-ccnx-timetlv-latest" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->
<front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
    <title abbrev="TimeTLV for CCNx">
    Alternative Delta Time Encoding for CCNx Using Compact Floating-Point Arithmetic
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->
    <author fullname="Cenk Gündoğan" initials="C." surname="Gündoğan">
        <organization>Huawei Technologies</organization>
        <address>
                <postal>
                        <street>Riesstrasse 25</street>
                        <city>Munich</city>
                        <code>D-80992</code>
                        <country>Germany</country>
                </postal>
                <email>cenk.gundogan@huawei.com</email>
        </address>
    </author>
    <author fullname="Thomas C. Schmidt" initials="TC." surname="Schmidt">
      <organization abbrev="HAW Hamburg">HAW Hamburg</organization>
      <address>
        <postal>
          <street>Berliner Tor 7</street>
          <city>Hamburg</city>
          <code>D-20099</code>
          <country>Germany</country>
        </postal>
        <email>t.schmidt@haw-hamburg.de</email>
        <uri>http://inet.haw-hamburg.de/members/schmidt</uri>
      </address>
    </author>

    <author fullname="Dave Oran" initials="D." surname="Oran">
        <organization>Network Systems Research and Design</organization>
        <address>
            <postal>
                <street>4 Shady Hill Square</street>
                <!-- Reorder these if your country does things differently -->
                <city>Cambridge</city>
                <region>MA</region>
                <code>02138</code>
                <country>USA</country>
            </postal>
            <phone></phone>
            <email>daveoran@orandom.net</email>
        <!-- uri and facsimile elements may also be added -->
        </address>
    </author>

    <author fullname="Matthias Waehlisch" initials="M." surname="Waehlisch">
      <organization abbrev="FU Berlin">Freie Universität Berlin</organization>
      <address>
        <postal>
          <street>Takustrasse 9</street>
          <city>Berlin</city>
          <code>D-14195</code>
          <country>Germany</country>
        </postal>
        <email>m.waehlisch@fu-berlin.de</email>
        <uri>http://www.inf.fu-berlin.de/~waehl</uri>
      </address>
    </author>

    <date year="2023" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>IRTF</area>
    <workgroup>ICNRG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
       <t>CCNx utilizes delta time for a number of functions. When using CCNx in environments with constrained nodes or bandwidth constrained networks, it is valuable to have a compressed representation of delta time. In order to do so, either accuracy or dynamic range has to be sacrificed. Since the current uses of delta time do not require both simultaneously, one can consider a logarithmic encoding such as that specified in <xref target="RFC5497"/> and <xref target="IEEE.754.2019"/>. This document updates <spanx>CCNx messages in TLV Format</spanx> <xref target="RFC8609"/> to specify this alternative encoding.</t>
      <t>This document is a product of the IRTF Information-Centric
      Networking Research Group (ICNRG).</t>
    </abstract>
</front>

<middle>

<section anchor="intro" title="Introduction">

<t>CCNx is well suited for Internet of Things (IoT) applications <xref target="RFC7927"/>.
LoWPAN adaptation layers (e.g., <xref target="RFC9139"/>) confirm the advantages of a space-efficient packet encoding for low-power and lossy networks.
CCNx utilizes absolute and delta time values for a number of functions.
When using CCNx in resource-constrained environments, it is valuable to have a compact representation of time values.  However, any compact time representation has to sacrifice accuracy or dynamic range. For some time uses this is relatively straightforward to achieve, for other uses, it is not.
As a result of experiments in bandwidth-constrained IEEE 802.15.4 deployments <xref target="ICNLOWPAN"/>, this document discusses the various cases of time values, proposes a compact encoding for delta times, and updates <xref target="RFC8609"/> to utilize this encoding format in CCNx messages.</t>
<t>This document has received fruitful reviews by the members of the research
group (see the Acknowledgments section).  It is the consensus of ICNRG that this
document should be published in the IRTF Stream of the RFC series. This document
does not constitute an IETF standard.</t>
</section>

<section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>

        <t>This document uses the terminology of <xref target="RFC8569"/> and <xref
        target="RFC8609"/> for CCNx entities.</t>

        <t>The following terms are used in the document and defined as follows:
        <list hangIndent="14" style="hanging">
          <t hangText="byte:">synonym for octet</t>
          <t hangText="time value:">a time offset measured in seconds</t>
          <t hangText="time code:">an 8-bit encoded time value</t>
        </list></t>
</section>

<section title="Usage of Time Values in CCNx">
<section anchor="relativeTime" title="Relative Time in CCNx">

<t>CCNx, as currently specified in <xref target="RFC8569"/>, utilizes delta time for only the lifetime of an Interest message (see sections 2.1, 2.2, 2.4.2, 10.3 of <xref target="RFC8569"/>). It is a hop-by-hop header value, and is currently encoded via the T_INTLIFE TLV as a 64-bit integer (<xref target="RFC8609"/> section 3.4.1). While formally an optional TLV, in all but some corner cases every Interest message is expected to carry the Interest Lifetime TLV, and hence having compact encoding is particularly valuable for keeping Interest messages short.</t>

<t>Since the current uses of delta time do not require both accuracy and dynamic range simultaneously, one can consider a logarithmic encoding such as that specified in <xref target="IEEE.754.2019"/> and outlined in <xref target="sec.timetlv"/>. This document updates <spanx>CCNx messages in TLV Format</spanx> <xref target="RFC8609"/> to permit this alternative encoding for selected time values. See <xref target="IANA"/> for the specific actions needed to register this alternative compact representation of Interest Lifetime.</t>
</section>

<section anchor="absoluteTime" title="Absolute Time in CCNx">
<t>CCNx, as currently specified in <xref target="RFC8569"/>, utilizes absolute time for various important functions. Each of these absolute time usages poses a different challenge for a compact representation. These are discussed in the following subsections.</t>

<section toc="exclude" title="Signature Time and Expiry Time">
  <t><spanx>Signature Time</spanx> is the time the signature of a content object was generated (<xref target="RFC8569">sections 8.2-8.4</xref>).
  <spanx>Expiry Time</spanx> indicates the expiry time of a content object (<xref target="RFC8569">section 4</xref>).
  Both values are content message TLVs and represent absolute timestamps in milliseconds since the POSIX epoch.
  They are currently encoded via the T_SIGTIME and T_EXPIRY TLVs as 64-bit unsigned integers (see <xref target="RFC8609"> section 3.6.4.1.4.5 and 3.6.2.2.2</xref>).</t>

  <t>Both time values could be in the past, or in the future, potentially by a large delta.
  They are also included in the security envelope of the message.
  Therefore, it seems there is no practical way to define an alternative compact encoding that preserves its semantics and security properties; hence we don't consider it further as a candidate.</t>
</section>

<section toc="exclude" title="Recommended Cache Time">
  <t><spanx>Recommended Cache Time</spanx> (RCT) for a content object (<xref target="RFC8569">see section 4</xref>) is a hop-by-hop header stating the expiration time for a cached content object in milliseconds since the POSIX epoch. It is currently encoded via the T_CACHETIME TLV as a 64-bit unsigned integer (see <xref target="RFC8609"> section 3.4.2</xref>).</t>

<t>A recommended cache time could be far in the future, but cannot be in the past and is likely to be a reasonably short offset from the current time.
  Therefore, this document allows the recommended cache time to be interpreted as a relative time value rather than an absolute time, since the semantics associated with an absolute time value do not seem to be critical to the utility of this value.
  This document therefore updates the recommended cache time with the following rule set:
  <list style="symbols">
    <t>Use absolute time as per <xref target="RFC8609"/></t>
    <t>Use relative time, if the compact time representation is used (see <xref target="sec.timetlv"/> and <xref target="sec.integration"/>)</t>
  </list>
  </t>
</section>
</section>
</section>
<section title="A Compact Time Representation with Logarithmic Range" anchor="sec.timetlv">
  <t>
    This document uses the compact time representation of ICNLoWPAN (<xref target="RFC9139">see section 7 of </xref>) that is inspired by <xref target="RFC5497"/> and <xref target="IEEE.754.2019"/>.
    Its logarithmic encoding supports a representation ranging from milliseconds to years.
    <xref target="fig.time-value"/> depicts the logarithmic nature of this time representation.
  </t>
  <figure anchor="fig.time-value" title="A logarithmic range representation allows for higher precision in the smaller time ranges and still supports large time deltas.">
    <artwork align="center"><![CDATA[
|| |  |   |    |     |      |       |        |         |          |
+-----------------------------------------------------------------+
milliseconds                                                  years
]]></artwork>
  </figure>
  <t>
    Time codes encode exponent and mantissa values in a single byte, but in contrast to the representation in <xref target="IEEE.754.2019"/>, time codes only encode positive numbers and hence do not include an extra sign bit.
    <xref target="fig.time-code"/> shows the configuration of a time code: an exponent width of 5 bits, and a mantissa width of 3 bits.
  </t>
  <figure anchor="fig.time-code" title="A time code with exponent and mantissa to encode a logarithmic range time representation.">
    <artwork align="center"><![CDATA[
<---          one byte wide          --->
+----+----+----+----+----+----+----+----+
|      exponent (b)      | mantissa (a) |
+----+----+----+----+----+----+----+----+
  0    1    2    3    4    5    6    7
]]></artwork>
  </figure>
  <t>
    The base unit for time values are seconds. A time value is calculated using the following formula (adopted from <xref target="RFC5497"/> and <xref target="RFC9139"/>),
    where (a) represents the mantissa, (b) the exponent, and (C) a constant factor set to <spanx style="verb">C := 1/32</spanx>.
    <list style="hanging">
      <t hangText="Subnormal (b == 0):"> (0 + a/8) * 2 * C
      </t>
      <t hangText="Normalized (b &gt; 0):"> (1 + a/8) * 2^b * C
      </t>
    </list>
    The subnormal form provides a gradual underflow between zero and the smallest normalized number.
    Eight time values exist in the subnormal range [0s,~0.054688s] with a step size of ~0.007812s between each time value.
    This configuration also encodes the following convenient numbers in seconds: [1, 2, 4, 8, 16, 32, 64, ...].
    <xref target="sec.testvectors"/> further includes test vectors to illustrate the logarithmic range.
  </t>
  <t>
    An example algorithm to encode a time value into the corresponding exponent and mantissa is given as pseudo code in <xref target="fig.algo"/>.
    Not all time values can be represented by a time code.
    For these instances, the closest time code is chosen that is smaller than the value to encode.
  </t>
  <figure anchor="fig.algo" title="Algorithm in pseudo code.">
    <artwork align="center"><![CDATA[
 input: float v    // time value
output:   int a, b // mantissa, exponent of time code

(a, b) encode (v):

    if (v == 0)
        return (0, 0)

    if (v < 2 * C)                              // subnormal
        a = floor (v * 4 / C)                   // round down
        return (a, 0)
    else                                        // normalized
        if (v > (1 + 7/8) * 2^31 * C)           // check bounds
            return (7, 31)                      // return maximum
        else
            b = floor (log2(v / C))             // round down
            a = floor ((v / (2^b * C) - 1) * 8) // round down
            return (a, b)
]]></artwork>
  </figure>
  <t>
    As an example: No specific time code for <spanx style="verb">0.063</spanx> exists, but this algorithm maps to the closest valid time code that is smaller, i.e., exponent <spanx style="verb">1</spanx> and mantissa <spanx style="verb">0</spanx> (the same as for time value <spanx style="verb">0.0625</spanx>).
  </t>
</section>
<section title="Protocol Integration of the Compact Time Representation" anchor="sec.integration">
  <t>A straightforward way to accommodate the compact time approach is to use a 1-byte length field to indicate this alternative encoding while retaining the existing TLV registry entries.
    This approach has backward compatibility problems, but is still considered for the following reasons:
    <list style="symbols">
      <t>Both CCNx RFCs are experimental and not Standards Track, hence expectations for forward and backward compatibility are not as stringent. "Flag day" upgrades of deployed CCNx networks, while inconvenient, are still feasible.</t>
      <t>The major use case for these compressed encodings are smaller-scale IoT and/or sensor networks where the population of consumers, producers, and forwarders is reasonably small.</t>
      <t>Since the current TLVs have hop-by-hop semantics, they are not covered by any signed hash and hence may be freely re-encoded by any forwarder. That means a forwarder supporting the new encoding can translate freely between the two encodings.</t>
      <t>The alternative of assigning new TLV registry values does not substantially mitigate the interoperability problems anyway.</t>
    </list>
    </t>
  <section title="Interest Lifetime" anchor="sec.integration.intlife">
    <t>The Interest Lifetime definition in <xref target="RFC8609"/> allows for a variable-length lifetime representation, where a length of <spanx style="verb">1</spanx> encodes the linear range [0,255] in milliseconds.
    This document changes the definition to always encode 1-byte Interest lifetime values in the compact time value representation (<xref target="def-intlifetime"/>).
    </t>
  <figure anchor="def-intlifetime" title="Changes to the definition of the Interest Lifetime TLV.">
    <artwork align="left"><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|           T_INTLIFE           |           Length = 1          |
+---------------+---------------+---------------+---------------+
| COMPACT_TIME  |
+---------------+
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|           T_INTLIFE           |           Length > 1          |
+---------------+---------------+---------------+---------------+
/                                                               /
/                      Lifetime (Length octets)                 /
/                                                               /
+---------------+---------------+---------------+---------------+
]]></artwork>
  </figure>

  <t>A note on legacy forwarders: A forwarder that does not support
  this compact time representation will interpret the time value as an Interest
  lifetime between 0 and 255 milliseconds. This may lead to a degradation of network performance, since Pending Interest Table (PIT) entries timeout quicker than expected.</t>
  </section>
  <section title="Recommended Cache Time" anchor="sec.integration.recctime">
    <t>The Recommended Cache Time definition in <xref target="RFC8609"/> specifies an absolute time representation that is of a length fixed to 8 bytes.
    This document changes the definition to always encode 1-byte Recommended Cache Time values in the compact relative time value representation (<xref target="def-recctime"/>).
    </t>
  <figure anchor="def-recctime" title="Changes to the definition of the Recommended Cache Time TLV.">
    <artwork align="left"><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|          T_CACHETIME          |           Length = 1          |
+---------------+---------------+---------------+---------------+
| COMPACT_TIME  |
+---------------+
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|          T_CACHETIME          |           Length = 8          |
+---------------+---------------+---------------+---------------+
/                                                               /
/                    Recommended Cache Time                     /
/                                                               /
+---------------+---------------+---------------+---------------+
]]></artwork>
  </figure>
  <t>The packet processing is adapted to calculate an absolute time from the relative time code based on the absolute reception time.
  On transmission, a new relative time code is calculated based on the current system time.</t>

  <t>A note on legacy forwarders: A forwarder that does not support
  this compact time representation is expected to consider a Recommended Cache Time with length 1 as a structural or syntactical error and discard the packet.
  Otherwise, a forwarder interprets the compact 1-byte time value as an absolute time far in the past, which impacts cache utilization.
  </t>
  </section>
</section>
<section anchor="IANA" title="IANA Considerations">
  <t>The protocol integration of the compact time encoding defined in <xref target="sec.integration.intlife"/> and <xref target="sec.integration.recctime"/> uses the following types registered in the <spanx style="verb">CCNx Hop-by-Hop Types</spanx> registry and assigned by IANA <xref target="RFC8609"/>.</t>
  <table anchor="tab.iana.types" align="center">
    <name>Registered CCNx Hop-by-Hop Types</name>
    <thead>
      <tr>
        <th align="center">Type</th>
        <th align="center">Name</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td align="center">0x0001</td>
        <td align="center">T_INTLIFE</td>
      </tr>
      <tr>
        <td align="center">0x0002</td>
        <td align="center">T_CACHETIME</td>
      </tr>
    </tbody>
  </table>
</section>

<section anchor="Security" title="Security Considerations">
        <t>This document makes no semantic changes to <xref target="RFC8569"/>, nor to any of the security properties of the message encodings of <xref target="RFC8609"/>, and hence has the same security considerations as those two existing documents.
        </t>
</section>

</middle>

  <!--  *****BACK MATTER ***** -->

<back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;
      &RFC8569;
      &RFC8609;
    </references>

    <references title="Informative References">
      &RFC5497;
      &RFC7927;
      &RFC9139;

      <reference anchor="IEEE.754.2019"
                 target="https://standards.ieee.org/content/ieee-standards/en/standard/754-2019.html">
        <front>
          <title>Standard for Floating-Point Arithmetic</title>
          <author initials="" fullname=""
                  surname="Institute of Electrical and Electronics Engineers, C/MSC - Microprocessor Standards Committee"/>
          <date month="June" year="2019"/>
        </front>
      </reference>

      <reference anchor="ICNLOWPAN" target="https://doi.org/10.1016/j.comcom.2020.10.002" quoteTitle="true" derivedAnchor="ICNLOWPAN">
        <front>
          <title>Designing a LoWPAN convergence layer for the Information Centric Internet of Things</title>
          <author initials="C." surname="Gündoğan">
            <organization showOnFrontPage="true">HAW Hamburg</organization>
          </author>
          <author initials="P." surname="Kietzmann">
            <organization showOnFrontPage="true">HAW Hamburg</organization>
          </author>
          <author initials="T." surname="Schmidt">
            <organization showOnFrontPage="true">HAW Hamburg</organization>
          </author>
          <author initials="M." surname="Wählisch">
            <organization showOnFrontPage="true">FU Berlin</organization>
          </author>
          <date month="December" year="2020"/>
        </front>
        <refcontent>Computer Communications, Vol. 164, No. 1, p. 114–123, Elsevier</refcontent>
      </reference>

    </references>

    <section anchor="sec.testvectors" title="Test Vectors">
      <t>
        The test vectors in <xref target="tab.testvectors"/> show sample time codes and their corresponding time values according to the algorithm outlined in <xref target="sec.timetlv"/>.
      </t>

      <texttable anchor="tab.testvectors"
                 title="Test Vectors">
        <ttcol align="center">Time Code</ttcol>

        <ttcol align="right">Time Value (seconds)</ttcol>

        <c>0x00</c>
        <c>0.000000</c>

        <c>0x01</c>
        <c>0.007812</c>

        <c>0x04</c>
        <c>0.031250</c>

        <c>0x08</c>
        <c>0.062500</c>

        <c>0x15</c>
        <c>0.203125</c>

        <c>0x28</c>
        <c>1.000000</c>

        <c>0x30</c>
        <c>2.000000</c>

        <c>0xF8</c>
        <c>67108864.000000</c>

        <c>0xFF</c>
        <c>125829120.000000</c>
      </texttable>
    </section>
    <section anchor="sec.tvapprox" title="Efficient Time Value Approximation">
      <t>
        A forwarder frequently converts compact time into milliseconds to compare Interest lifetimes and the duration of cache entries.
        On many architectures, multiplication and division perform slower than addition, subtraction, and bit shifts.
        The following equations approximate the formulas in <xref target="sec.timetlv"/>, and scale from seconds into the milliseconds range by applying a factor of 2^10 instead of 10^3.
        This results in an error of 2.4%.

        <list style="hanging" hangIndent="10">
          <t hangText="b == 0:">2^10 * a * 2^-3 * 2^1 * 2^-5<br/>= a &lt;&lt; 3
          </t>
          <t hangText="b &gt; 0:">(2^10 + a * 2^-3 * 2^10) * 2^b * 2^-5<br/>= (1 &lt;&lt; 5 + a &lt;&lt; 2) &lt;&lt; b
          </t>
        </list>
      </t>
    </section>
    <section numbered="no" title="Acknowledgments">
      <t>We would like to thank the active members of the ICNRG research group for constructive thoughts.
      In particular, we thank Marc Mosko and Ken Calvert for their valuable feedback on the encoding scheme and the protocol integration.</t>
    </section>
    <!-- Change Log
v00 2019-10-03  DRO   Initial version
v03	2021-01-18	DRO	  Refreash - no changes
v05 2022-01-20  CG    major update-->
</back>
</rfc>
